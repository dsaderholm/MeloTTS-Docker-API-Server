FROM python:3.9

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    ffmpeg \
    wget \
    gnupg \
    software-properties-common \
    vainfo \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install -r requirements.txt

# Clone MeloTTS repository
RUN git clone https://github.com/myshell-ai/MeloTTS.git
WORKDIR /MeloTTS

# Install MeloTTS
RUN pip install --no-cache-dir -e .
RUN python -m unidic download

# Install compatible Intel PyTorch Extension (for PyTorch 1.13.1)
RUN pip install --no-cache-dir intel-extension-for-pytorch==1.13.100 || echo "IPEX not available for this PyTorch version"

# Create a helper script for Intel GPU initialization
WORKDIR /
RUN echo 'import os\n\
import torch\n\
\n\
def initialize_intel_gpu():\n\
    """Try to initialize Intel GPU support for PyTorch"""\n\
    success = False\n\
    \n\
    # Try Intel Extension for PyTorch if available\n\
    try:\n\
        import intel_extension_for_pytorch as ipex\n\
        print("Intel Extension for PyTorch is available")\n\
        \n\
        # For newer versions with XPU support\n\
        if hasattr(torch, "xpu") and torch.xpu.is_available():\n\
            print("Intel XPU (GPU) is available. Using Intel Arc GPU.")\n\
            # Set default device to Intel XPU\n\
            torch.set_default_device("xpu")\n\
            success = True\n\
        # For older versions\n\
        else:\n\
            print("Intel XPU not available in this PyTorch version")\n\
            # Check for older IPEX methods\n\
            try:\n\
                ipex_device = ipex.DEVICE\n\
                print(f"Using IPEX device: {ipex_device}")\n\
                success = True\n\
            except:\n\
                print("No IPEX device available")\n\
    except ImportError:\n\
        print("Intel Extension for PyTorch not available")\n\
    \n\
    if not success:\n\
        print("Using CPU for processing")\n\
    \n\
    return success\n\
\n\
# Auto-initialize GPU\n\
gpu_initialized = initialize_intel_gpu()' > /intel_gpu_init.py

# Modify app.py to use Intel GPU
COPY app.py .
RUN sed -i 's/device = "auto"  # Will automatically use GPU if available/from intel_gpu_init import initialize_intel_gpu\nis_gpu_available = initialize_intel_gpu()\ndevice = "xpu" if is_gpu_available else "cpu"  # Use Intel GPU if available/' app.py

# Copy the rest of the application files
COPY . .

EXPOSE 8080

# Environment variables will be set via Docker run or Docker Compose
CMD ["python", "app.py"]